import{html,PolymerElement}from"../../../../@polymer/polymer/polymer-element.js";import{store}from"../haxcms-site-store.js";import"../../../../@polymer/iron-list/iron-list.js";import{autorun,toJS}from"../../../../mobx/lib/mobx.module.js";class SiteQuery extends PolymerElement{static get tag(){return"site-query"}static get template(){return html`
      <style>
        :host {
          display: block;
        }
        iron-list {
          @apply --site-query-iron-list;
        }
      </style>
      <iron-list items="[[localItems]]" as="item" grid="[[grid]]">
        <slot></slot>
      </iron-list>
    `}static get properties(){return{routerManifest:{type:Object},activeId:{type:String},localItems:{type:Array,computed:"_computeLocalItems(conditions, sort, routerManifest.items, activeId, forceRebuild)"},conditions:{type:Object,value:{}},sort:{type:Object,value:{}},forceRebuild:{type:Boolean,value:!1},grid:{type:Boolean,value:!1}}}_computeLocalItems(conditions,sorts,realItems,activeId){let items=Object.assign([],toJS(realItems));if(conditions&&items){for(var i in conditions){items=items.filter(item=>{if("$activeId"===conditions[i]){if(item[i]!==activeId){return!1}return!0}else{if(item[i]!==conditions[i]){return!1}return!0}})}}if(sorts){for(var i in sorts){items.sort((item1,item2)=>{if("ASC"===sorts[i]){if(item1[i]<item2[i]){return-1}else if(item1[i]>item2[i]){return 1}else{return 0}}else{if(item1[i]>item2[i]){return-1}else if(item1[i]<item2[i]){return 1}else{return 0}}})}}return items}connectedCallback(){super.connectedCallback();this.__disposer=autorun(()=>{this.routerManifest=Object.assign({},toJS(store.routerManifest))});this.__disposer=autorun(()=>{this.activeId=toJS(store.activeId)})}disconnectedCallback(){super.disconnectedCallback();this.__disposer()}}window.customElements.define(SiteQuery.tag,SiteQuery);export{SiteQuery};