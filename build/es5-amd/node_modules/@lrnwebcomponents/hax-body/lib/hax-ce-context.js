define(["exports", "../../../lit-element/lit-element.js", "./hax-store.js", "./hax-context-item.js", "./hax-toolbar.js", "../../../mobx/dist/mobx.esm.js"], function (_exports, _litElement, _haxStore, _haxContextItem, _haxToolbar, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxCeContext = void 0;

  function _templateObject2_16524fd014a311eb85a39505bc445fc0() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        hax-context-item {\n          margin: 0;\n        }\n        :host(.hax-context-pin-top) hax-toolbar {\n          position: fixed;\n          top: 0px;\n          flex-direction: column;\n        }\n      "]);

    _templateObject2_16524fd014a311eb85a39505bc445fc0 = function _templateObject2_16524fd014a311eb85a39505bc445fc0() {
      return data;
    };

    return data;
  }

  function _templateObject_16524fd014a311eb85a39505bc445fc0() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <hax-toolbar hide-more>\n        <hax-context-item\n          mini\n          action\n          more\n          slot=\"prefix\"\n          icon=\"", "\"\n          label=\"", ", click to change\"\n          ?disabled=\"", "\"\n          event-name=\"hax-transform-node\"\n        ></hax-context-item>\n        <slot slot=\"primary\"></slot>\n      </hax-toolbar>\n    "]);

    _templateObject_16524fd014a311eb85a39505bc445fc0 = function _templateObject_16524fd014a311eb85a39505bc445fc0() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-ce-context`
   * `A context menu that provides common custom-element based authoring options.
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of custom-element based buttons and events for use in a larger solution.
   * @element hax-ce-context
   */
  var HaxCeContext = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HaxCeContext, _LitElement);

    var _super = _createSuper(HaxCeContext);

    function HaxCeContext() {
      babelHelpers.classCallCheck(this, HaxCeContext);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(HaxCeContext, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "onScreen" && _this.onScreen) {
            _this._computeValues();
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_16524fd014a311eb85a39505bc445fc0(), this.activeTagIcon, this.activeTagName, this.disableTransform);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this2 = this;

        (0, _mobxEsm.autorun)(function () {
          _this2.activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);

          if (_this2.activeNode && _this2.activeNode.classList) {
            _this2._computeValues();
          }
        });
      }
      /**
       * HAX properties changed, update buttons available.
       */

    }, {
      key: "_computeValues",
      value: function _computeValues() {
        if (_haxStore.HAXStore.activeHaxBody && this.activeNode != null) {
          if (!_haxStore.HAXStore.isTextElement(this.activeNode)) {
            if (this.activeNode.tagName == "GRID-PLATE") {
              this.disableTransform = true;
              this.activeTagName = "Grid";
              this.activeTagIcon = "hax:3/3/3/3";
            } else {
              // detect if this can be transformed into anything else
              this.disableTransform = !_haxStore.HAXStore.activeHaxBody.canTansformNode(this.activeNode);

              if (_haxStore.HAXStore.activeGizmo) {
                this.activeTagName = _haxStore.HAXStore.activeGizmo.title;
                this.activeTagIcon = _haxStore.HAXStore.activeGizmo.icon;
              }
            }
          }
        } else {
          this.activeTagName = "";
          this.activeTagIcon = "";
        }
      }
    }], [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_16524fd014a311eb85a39505bc445fc0())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-ce-context";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          disableTransform: {
            type: Boolean
          },
          onScreen: {
            type: Boolean,
            attribute: "on-screen",
            reflect: true
          },
          activeTagIcon: {
            type: String
          },
          activeTagName: {
            type: String
          }
        };
      }
    }]);
    return HaxCeContext;
  }(_litElement.LitElement);

  _exports.HaxCeContext = HaxCeContext;
  window.customElements.define(HaxCeContext.tag, HaxCeContext);
});