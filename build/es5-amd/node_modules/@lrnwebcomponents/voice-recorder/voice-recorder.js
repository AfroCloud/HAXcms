define(["exports", "meta", "require", "../../lit-element/lit-element.js", "../../vmsg/vmsg.js"], function (_exports, meta, _require, _litElement, _vmsg) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.VoiceRecorder = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_cac75130203f11ea903739e66ca7cd9c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n        }\n      "]);

    _templateObject2_cac75130203f11ea903739e66ca7cd9c = function _templateObject2_cac75130203f11ea903739e66ca7cd9c() {
      return data;
    };

    return data;
  }

  function _templateObject_cac75130203f11ea903739e66ca7cd9c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <button @click=\"", "\">\n        <iron-icon icon=\"", "\"></iron-icon>", "\n      </button>\n    "]);

    _templateObject_cac75130203f11ea903739e66ca7cd9c = function _templateObject_cac75130203f11ea903739e66ca7cd9c() {
      return data;
    };

    return data;
  }

  /**
   * `voice-recorder`
   * `LAME bridge`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @demo demo/index.html
   * @customElement voice-recorder
   */
  var VoiceRecorder =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(VoiceRecorder, _LitElement);
    babelHelpers.createClass(VoiceRecorder, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_cac75130203f11ea903739e66ca7cd9c(), this.recordState, this.iconState, this.textState);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_cac75130203f11ea903739e66ca7cd9c())];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          iconState: {
            type: String
          },
          textState: {
            type: String
          },
          recording: {
            type: Boolean
          }
        };
      }
      /**
       * Convention we use
       */

    }, {
      key: "tag",
      get: function get() {
        return "voice-recorder";
      }
      /**
       * HTMLElement
       */

    }]);

    function VoiceRecorder() {
      var _this;

      babelHelpers.classCallCheck(this, VoiceRecorder);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(VoiceRecorder).call(this));
      _this.recording = false;
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icons/av-icons.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(VoiceRecorder, [{
      key: "recordState",
      value: function recordState(e) {
        this.recording = !this.recording;
      }
      /**
       * LitElement ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {}
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "recording") {
            if (_this2[propName]) {
              _this2.textState = "stop";
              _this2.iconState = "av:stop";
            } else {
              _this2.textState = "Record";
              _this2.iconState = "av:play-arrow";
            } // observer to act on the recording piece


            _this2.toggleRecording(_this2[propName], oldValue);
          }
        });
      }
      /**
       * Toggle the LAME bridge
       */

    }, {
      key: "toggleRecording",
      value: function toggleRecording(newValue, oldValue) {
        var _this3 = this;

        if (newValue) {
          // need to start...
          var basePath = this.pathFromUrl(decodeURIComponent(meta.url));
          (0, _vmsg.record)({
            wasmURL: basePath + "../../vmsg/vmsg.wasm"
          }).then(function (blob) {
            console.log("Recorded MP3", blob);

            _this3.dispatchEvent(new CustomEvent("voice-recorder-recording", {
              value: blob
            }));
          });
        } // was on now off


        if (oldValue && !newValue) {// need to stop
        }
      }
    }, {
      key: "pathFromUrl",
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
    }]);
    return VoiceRecorder;
  }(_litElement.LitElement);

  _exports.VoiceRecorder = VoiceRecorder;
  customElements.define(VoiceRecorder.tag, VoiceRecorder);
});